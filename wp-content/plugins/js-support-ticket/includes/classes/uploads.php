<?php

if (!defined('ABSPATH'))
    die('Restricted Access');

class JSSTuploads {

    private $ticketid;
    private $uploadfor;

    function jssupportticket_upload_dir( $dir ) {
        $form_request = JSSTrequest::getVar('form_request');
        if($form_request == 'jssupportticket'){
            $datadirectory = jssupportticket::$_config['data_directory'];
            $path = $datadirectory . '/attachmentdata';

            $foldername = '';
            
            if($this->uploadfor == 'ticket'){
                $path = $path . '/ticket';
                $query = "SELECT attachmentdir FROM `".jssupportticket::$_db->prefix."js_ticket_tickets` WHERE id = ".$this->ticketid;
                $foldername = jssupportticket::$_db->get_var($query);
            }

            $userpath = $path . '/' . $foldername;
            $array = array(
                'path'   => $dir['basedir'] . '/' . $userpath,
                'url'    => $dir['baseurl'] . '/' . $userpath,
                'subdir' => '/'. $userpath,
            ) + $dir;
            return $array;
        }elseif($this->uploadfor == 'notificationlogo'){
            $datadirectory = jssupportticket::$_config['data_directory'];
            $path = $datadirectory;
            return $path;

        }else{
            return $dir;
        }
    }

    function storeTicketAttachment($data, $caller){
        $ticketid = $data['ticketid'];
        $filesize = jssupportticket::$_config['file_maximum_size'];
        if (!function_exists('wp_handle_upload')) { 
            require_once( ABSPATH . 'wp-admin/includes/file.php' ); 
        }
        $this->ticketid = $ticketid;
        $this->uploadfor = 'ticket';
        // Register our path override.
        add_filter( 'upload_dir', array($this,'jssupportticket_upload_dir'));
        // Do our thing. WordPress will move the file to 'uploads/mycustomdir'.
        $result = array();
        $files = $_FILES['filename'];

        if(!is_array($files['name'])){
            return;
        }

        foreach ($files['name'] as $key => $value) {
            if ($files['name'][$key]) {
                $file = array(
                        'name'     => $files['name'][$key],
                        'type'     => $files['type'][$key],
                        'tmp_name' => $files['tmp_name'][$key],
                        'error'    => $files['error'][$key],
                        'size'     => $files['size'][$key]
                        );
                $uploadfilesize = $file['size'] / 1024; //kb
                if($uploadfilesize > $filesize){
                    JSSTmessage::setMessage(__('Error file size too large', 'js-support-ticket'), 'error');
                    return;
                }

                $filetyperesult = wp_check_filetype($_FILES['filename']['name'][$key]);
                if(!empty($filetyperesult['ext']) && !empty($filetyperesult['type']) && strcasecmp($filetyperesult['ext'],'php')!=0){
                    $document_file_types = JSSTincluder::getJSModel('configuration')->getConfigValue('file_extension');
                    if(stristr($document_file_types, $filetyperesult['ext'])){

                        $result = wp_handle_upload($file, array('test_form' => false));
                        if ( $result && ! isset( $result['error'] ) ) {
                            $filename = basename( $result['file'] );
                            $replyattachmentid = isset($data['replyattachmentid']) ? $data['replyattachmentid'] : '';
                            $result = $caller->storeTicketAttachment($ticketid, $replyattachmentid, $uploadfilesize, $filename);
                        } else {
                            /**
                             * Error generated by _wp_handle_upload()
                             * @see _wp_handle_upload() in wp-admin/includes/file.php
                             */
                            JSSTmessage::setMessage($result['error'], 'error');
                        }
                    }
                }
            }
        }
        // Set everything back to normal.
        remove_filter( 'upload_dir', array($this,'jssupportticket_upload_dir'));
        return;
    }

    function storeTicketCustomUploadFile($id, $field){
        if (!function_exists('wp_handle_upload')) { 
            require_once( ABSPATH . 'wp-admin/includes/file.php' ); 
        }
        $filesize = jssupportticket::$_config['file_maximum_size'];
        $this->ticketid = $id;
        $this->uploadfor = 'ticket';
        // Register our path override.
        add_filter( 'upload_dir', array($this,'jssupportticket_upload_dir'));
        // Do our thing. WordPress will move the file to 'uploads/mycustomdir'.
        $result = array();
        $file = array(
                'name'     => $_FILES[$field]['name'],
                'type'     => $_FILES[$field]['type'],
                'tmp_name' => $_FILES[$field]['tmp_name'],
                'error'    => $_FILES[$field]['error'],
                'size'     => $_FILES[$field]['size']
                );
        $uploadfilesize = $_FILES[$field]['size'] / 1024; //kb
        if($uploadfilesize > $filesize){
            JSSTmessage::setMessage(__('Error file size too large', 'js-support-ticket'), 'error');
            return;
        }
        $filetyperesult = wp_check_filetype($_FILES[$field]['name']);
        if(!empty($filetyperesult['ext']) && !empty($filetyperesult['type']) && strcasecmp($filetyperesult['ext'],'php')!=0){
            $image_file_types = JSSTincluder::getJSModel('configuration')->getConfigValue('file_extension');
            if(strstr($image_file_types, $filetyperesult['ext'])){
                $result = wp_handle_upload($file, array('test_form' => false));
                if (isset( $result['error'] ) ) {
                    /**
                     * Error generated by _wp_handle_upload()
                     * @see _wp_handle_upload() in wp-admin/includes/file.php
                     */
                    JSSTmessage::setMessage($result['error'], 'error');
                }else{
                    $filename = basename( $result['file'] );
                }
            }
        }
        // Set everything back to normal.
        remove_filter( 'upload_dir', array($this,'jssupportticket_upload_dir'));
        //to store name of custom file in params
        JSSTincluder::getJSModel('ticket')->storeUploadFieldValueInParams($id,$filename,$field);
        return;
    }

    
    function uploadDesktopNotificationLogo(){
        $filesize = jssupportticket::$_config['file_maximum_size'];
        if (!function_exists('wp_handle_upload')) { 
            require_once( ABSPATH . 'wp-admin/includes/file.php' ); 
        }
        $this->uploadfor = 'notificationlogo';
        // Register our path override.
        add_filter( 'upload_dir', array($this,'jssupportticket_upload_dir'));
        // Do our thing. WordPress will move the file to 'uploads/mycustomdir'.
        $result = array();
        $file = array(
                'name'     => $_FILES['logo_for_desktop_notfication']['name'],
                'type'     => $_FILES['logo_for_desktop_notfication']['type'],
                'tmp_name' => $_FILES['logo_for_desktop_notfication']['tmp_name'],
                'error'    => $_FILES['logo_for_desktop_notfication']['error'],
                'size'     => $_FILES['logo_for_desktop_notfication']['size'],
                );
        $uploadfilesize = $file['size'] / 1024; //kb
        if($uploadfilesize > $filesize){
            JSSTmessage::setMessage(__('Error file size too large', 'js-support-ticket'), 'error');
            return;
        }
        $filetyperesult = wp_check_filetype($_FILES['logo_for_desktop_notfication']['name']);
        if(!empty($filetyperesult['ext']) && !empty($filetyperesult['type'])){
            $image_file_types = JSSTincluder::getJSModel('configuration')->getConfigValue('file_extension');
            if(stristr($image_file_types, $filetyperesult['ext'])){
                $result = wp_handle_upload($file, array('test_form' => false));
                if ( $result && ! isset( $result['error'] ) ) {
                    $filename = basename( $result['file'] );
                    $result = JSSTincluder::getJSModel('configuration')->storeDesktopNotificationLogo($filename);
                } else {
                    JSSTmessage::setMessage($result['error'], 'error');
                }
            }
        }
        // Set everything back to normal.
        remove_filter( 'upload_dir', array($this,'jssupportticket_upload_dir'));
        return;
    }


}

?>
